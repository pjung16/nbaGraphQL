{"version":3,"sources":["actions/playerActions.js","actions/graphActions.js","components/SearchBar/SearchBar.js","components/Header/Header.js","components/PlayerStats/PlayerStats.js","components/PlayerStatsBlock/PlayerStatsBlock.js","components/PlayerStatsBlockContainer/PlayerStatsBlockContainer.js","components/DropdownMenu/DropdownMenu.js","components/Graph/Graph.js","components/GraphContainer/GraphContainer.js","components/Home/Home.js","components/PlayerProfile/PlayerProfile.js","components/Modal/Modal.js","components/ModalSwitch/ModalSwitch.js","App.js","reducers/initialState.js","reducers/index.js","reducers/graphReducer.js","reducers/playerReducer.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["ADD_PLAYER","DELETE_PLAYER","CHANGE_GRAPH_DATATYPE","UPDATE_PLAYERS_DATA","ADD_PLAYER_TO_SERIES","DELETE_PLAYER_FROM_SERIES","PLAYER_QUERY","gql","_templateObject","STATS_QUERY","_templateObject2","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","organizePlayerStats","stats","playerStats","forEach","cur","concat","player","first_name","last_name","push","entries","map","id","sort","a","b","game","date","slice","Math","max","length","checkPlayerDuplicate","players","p","state","submitted","search","handleSearchChange","bind","assertThisInitialized","handleSubmit","event","target","value","setState","preventDefault","_this2","dispatch","react_default","createElement","className","onSubmit","type","onChange","placeholder","react_apollo_esm","query","variables","_ref","loading","error","data","console","log","activePlayerSearch","key","playerIds","_ref2","playerRecentStats","obj","name","onClick","addPlayer","options","team","full_name","Component","connect","Header","components_SearchBar_SearchBar","PlayerStats_templateObject","color","location","useLocation","playerId","season","style","borderColor","display","alignItems","react_router_dom","to","pathname","background","width","height","viewBox","fill","xmlns","d","marginLeft","deletePlayer","deletePlayerFromSeries","x1","y1","x2","y2","stroke","strokeWidth","pts","reb","ast","stl","blk","games_played","min","fg_pct","toFixed","fg3_pct","ft_pct","turnover","PlayerStatsBlock","colors","i","components_PlayerStats_PlayerStats","DropdownMenu_templateObject","e","graph","currentTarget","items","label","Graph","graphOptions","Array","isArray","components_DropdownMenu_DropdownMenu","highcharts_react_min_default","highcharts","Highcharts","containerProps","graphs","Home","components_Header_Header","PlayerStatsBlockContainer","GraphContainer","PlayerProfile_templateObject","PlayerProfile","useParams","history","useHistory","back","stopPropagation","goBack","position","react","opponent","team_id","visitor_team_id","home_team_id","moment","format","teams","abbreviation","Modal","components_PlayerProfile_PlayerProfile","ModalSwitch","Fragment","react_router","exact","path","children","components_Home_Home","components_Modal_Modal","client","ApolloClient","uri","App","ModalSwitch_ModalSwitch","initialState","graphDataType","chart","backgroundColor","title","text","xAxis","labels","enabled","yAxis","tooltip","borderWidth","fontSize","whiteSpace","fontFamily","padding","headerFormat","pointFormat","shared","legend","itemStyle","plotOptions","series","connectorAllowed","pointStart","responsive","rules","condition","maxWidth","chartOptions","layout","align","verticalAlign","rootReducer","combineReducers","arguments","undefined","action","newState","JSON","parse","stringify","newUpdatedState","Date","y","gameData","getMonth","getDate","getFullYear","playerName","newAddedState","toConsumableArray","newRemovedState","filter","removeIndex","Boolean","window","hostname","match","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c6c5b31.chunk.js","sourcesContent":["/*\n * action types\n */\n\nexport const ADD_PLAYER = 'ADD_PLAYER'\nexport const DELETE_PLAYER = 'DELETE_PLAYER'\n\n/*\n * action creators\n */\n\nexport function addPlayer(player) {\n  return { type: ADD_PLAYER, player }\n}\n\n\nexport function deletePlayer(player) {\n  return { type: DELETE_PLAYER, player }\n}","/*\n * action types\n */\n\nexport const CHANGE_GRAPH_DATATYPE = 'CHANGE_GRAPH_DATATYPE'\nexport const UPDATE_PLAYERS_DATA = 'UPDATE_PLAYERS_DATA'\nexport const ADD_PLAYER_TO_SERIES = 'ADD_PLAYER_TO_SERIES'\nexport const DELETE_PLAYER_FROM_SERIES = 'DELETE_PLAYER_FROM_SERIES'\n\n\n/*\n * action creators\n */\n\nexport function changeGraphDataType(graph) {\n  return { type: CHANGE_GRAPH_DATATYPE, graph };\n}\n\nexport function updatePlayersData(stats) {\n  return { type: UPDATE_PLAYERS_DATA, stats };\n}\n\nexport function addPlayerToSeries(options) {\n  return { type: ADD_PLAYER_TO_SERIES, options };\n}\n\nexport function deletePlayerFromSeries(player) {\n  return {type: DELETE_PLAYER_FROM_SERIES, player};\n}","import React, {Component} from 'react';\nimport './SearchBar.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport { addPlayer } from '../../actions/playerActions';\nimport { addPlayerToSeries } from '../../actions/graphActions';\n\nconst PLAYER_QUERY = gql`\n  query PlayerQuery($search: String!) {\n    activePlayerSearch (search: $search) {\n      id\n      first_name\n      last_name\n      position\n      height_feet\n      height_inches\n      weight_pounds\n      team{\n        full_name\n      }\n    }\n  }\n`;\n\nconst STATS_QUERY = gql`\n  query PlayerQuery($playerIds: [ID!]) {\n    stats (playerIds: $playerIds, seasons: [2019]) {\n      min\n      pts\n      reb\n      ast\n      stl\n      blk\n      fg_pct\n      fg3_pct\n      ft_pct\n      turnover\n      player {\n        first_name\n        last_name\n        id\n        team_id\n      }\n      game {\n        date\n        visitor_team_id\n        home_team_id\n      }\n    }\n  }\n`;\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitted: false,\n      search: '',\n    };\n\n    this.handleSearchChange = this.handleSearchChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSearchChange(event) {\n    if (event.target.value.length > 2) {\n      this.setState({\n        search: event.target.value,\n        submitted: false\n      });\n    }\n    else {\n      this.setState({\n        search: event.target.value,\n        submitted: false\n      });\n    }\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.setState({\n      submitted: true\n    });\n  }\n\n  organizePlayerStats = (stats) => {\n    let playerStats = {};\n    stats.forEach((cur) => {\n      if (!playerStats[`${cur.player.first_name} ${cur.player.last_name}`]) {\n        playerStats[`${cur.player.first_name} ${cur.player.last_name}`] = [cur]\n      } else {\n        playerStats[`${cur.player.first_name} ${cur.player.last_name}`].push(cur)\n      }\n    });\n    return Object.entries(playerStats).map(cur => {\n      return {\n        id: cur[0],\n        stats: cur[1].sort(function(a, b) {\n          return (a.game.date < b.game.date) ? -1 : ((a.game.date > b.game.date) ? 1 : 0);\n        }).slice(Math.max(cur[1].length - 8, 1))\n      }\n    })\n  }\n\n  checkPlayerDuplicate = (player) => {\n    const { players } = this.props;\n    for (let p in players){\n      if (players[p].player.id === player.id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  render() {\n    const { dispatch } = this.props;\n\n    return (\n      <div className=\"searchbar\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            <input\n              type=\"text\"\n              value={this.state.search}\n              onChange={this.handleSearchChange}\n              placeholder=\"Search player...\"\n              className=\"search-field\"\n            />\n          </label>\n          <input \n            type=\"submit\" \n            value=\"Search\" \n            className=\"add-button\"\n          />\n        </form>\n        {this.state.submitted ? <Query query={PLAYER_QUERY} variables = {{ search: this.state.search }}>\n          {({ loading, error, data }) => {\n            if (loading) return null;\n            if (error) console.log(error);\n\n            return (\n              <div className=\"dropdown\">\n                {data.activePlayerSearch.map(player => (\n                  <Query key={player.id} query={STATS_QUERY} variables = {{ playerIds: [player.id] }}>\n                    {({ loading, error, data }) => {\n                      if (loading) return null;\n                      if (error) console.log(error);\n                      let playerRecentStats = {};\n                      if (data) {\n                        const playerStats = this.organizePlayerStats(data.stats);\n                        playerStats.forEach(cur => {\n                          let obj = { \n                            name: cur.id,\n                            type: 'spline'\n                          }\n                          obj.data = cur.stats;\n                          playerRecentStats = obj\n                        })\n                      }\n                      return (<div key={player.id} className=\"dropdown-item\" onClick={() => {\n                        if (!this.checkPlayerDuplicate(player)) {\n                          dispatch(addPlayer(player));\n                          dispatch(addPlayerToSeries(playerRecentStats));\n                        }\n                        this.setState({\n                          search: '',\n                          submitted: false\n                        });\n                      }}>\n                        {player.first_name} {player.last_name}: {player.team.full_name}\n                      </div>)\n                    }}\n                  </Query>\n                ))}\n              </div>\n            );\n          }}\n        </Query> : null}\n      </div>\n    );\n  }\n}\n\nconst getAllPlayers = (players) => {\n  return players\n};\n\nconst mapStateToProps = state => ({\n  players: getAllPlayers(state.players)\n});\n\nexport default connect(mapStateToProps)(SearchBar);","import React from 'react';\nimport './Header.css';\nimport SearchBar from '../SearchBar/SearchBar';\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <div>NBA GraphQL</div>\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport {\n  Link,\n  useLocation,\n} from \"react-router-dom\";\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport { deletePlayer } from '../../actions/playerActions';\nimport { deletePlayerFromSeries } from '../../actions/graphActions';\nimport './PlayerStats.css';\n\nconst STATS_QUERY = gql`\n  query SeasonAverageQuery($playerId: ID!) {\n    season (season: 2019, playerIds: [$playerId]) {\n      games_played\n      min\n      pts\n      reb\n      ast\n      stl\n      blk\n      fg_pct\n      fg3_pct\n      ft_pct\n      turnover\n    }\n    player (id: $playerId) {\n      first_name\n      last_name\n      position\n      team {\n        full_name\n      }\n    }\n  }\n`;\n\nfunction PlayerStats({player: {id}, color, dispatch}) {\n  const location = useLocation();\n\n  return (\n    <div>\n      <Query query={STATS_QUERY} variables = {{\"playerId\": id}}>\n        {({ loading, error, data }) => {\n          if (loading) return null;\n          if (error) console.log(error);\n          const stats = data.season[0]\n          const player = data.player\n          console.log(color)\n          return (\n            <div className=\"player-stat-block\" style={{borderColor: color}}>\n              <div className=\"player-stat-head\" style={{borderColor: color}}>\n                <div>{`${player.first_name} ${player.last_name}`}</div>\n                <div style={{display: 'flex', alignItems: 'center'}}>\n                  <div>\n                    <Link\n                      key={id}\n                      to={{\n                        pathname: `/player/${id}`,\n                        // This is the trick! This link sets\n                        // the `background` in location state.\n                        state: { background: location }\n                      }}\n                    >\n                      <svg width=\"30\" height=\"30\" viewBox=\"0 0 30 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M5.00001 24C5.00001 24.5523 5.44772 25 6.00001 25H15C15.5523 25 16 24.5523 16 24C16 23.4477 15.5523 23 15 23H7.00001V15C7.00001 14.4477 6.55229 14 6.00001 14C5.44772 14 5.00001 14.4477 5.00001 15V24ZM13.4747 15.1111L5.2929 23.2929L6.70711 24.7071L14.8889 16.5253L13.4747 15.1111Z\" fill=\"white\"/>\n                        <path d=\"M25 6.00001C25 5.44772 24.5523 5.00001 24 5.00001H15C14.4477 5.00001 14 5.44772 14 6.00001C14 6.55229 14.4477 7.00001 15 7.00001H23V15C23 15.5523 23.4477 16 24 16C24.5523 16 25 15.5523 25 15V6.00001ZM16.5253 14.8889L24.7071 6.70711L23.2929 5.2929L15.1111 13.4747L16.5253 14.8889Z\" fill=\"white\"/>\n                      </svg>\n                    </Link>\n                  </div>\n                  <div style={{marginLeft: '10px'}} onClick={() => {\n                    dispatch(deletePlayer(id));\n                    dispatch(deletePlayerFromSeries(`${player.first_name} ${player.last_name}`));\n                  }}>\n                    <svg width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <line x1=\"0.707107\" y1=\"0.792893\" x2=\"19.799\" y2=\"19.8848\" stroke=\"white\" strokeWidth=\"2\"/>\n                      <line x1=\"19.8071\" y1=\"0.707107\" x2=\"0.71523\" y2=\"19.799\" stroke=\"white\" strokeWidth=\"2\"/>\n                    </svg>\n                  </div>\n                </div>\n              </div>\n              <div className=\"player-stat-row\">\n                <div className=\"w-1/3\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Pts</div>\n                  <div className=\"stat-num\">{stats.pts}</div>\n                </div>\n                <div className=\"w-1/3\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Reb</div>\n                  <div className=\"stat-num\">{stats.reb}</div>\n                </div>\n                <div className=\"w-1/3\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Ast</div>\n                  <div className=\"stat-num\">{stats.ast}</div>\n                </div>\n              </div>\n              <div className=\"player-stat-row\">\n                <div className=\"w-23\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Stl</div>\n                  <div className=\"stat-num\">{stats.stl}</div>\n                </div>\n                <div className=\"w-23\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Blk</div>\n                  <div className=\"stat-num\">{stats.blk}</div>\n                </div>\n                <div className=\"w-23\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">GP</div>\n                  <div className=\"stat-num\">{stats.games_played}</div>\n                </div>\n                <div className=\"w-3/10\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">Mins</div>\n                  <div className=\"stat-num\">{stats.min}</div>\n                </div>\n              </div>\n              <div className=\"player-stat-row\">\n                <div className=\"w-27\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">FG%</div>\n                  <div className=\"stat-num\">{+(stats.fg_pct*100).toFixed(2)}</div>\n                </div>\n                <div className=\"w-27\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">3FG%</div>\n                  <div className=\"stat-num\">{+(stats.fg3_pct*100).toFixed(2)}</div>\n                </div>\n                <div className=\"w-27\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">FT%</div>\n                  <div className=\"stat-num\">{+(stats.ft_pct*100).toFixed(2)}</div>\n                </div>\n                <div className=\"w-19\" style={{borderColor: color}}>\n                  <div className=\"stat-name\">TO</div>\n                  <div className=\"stat-num\">{stats.turnover}</div>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </Query>\n    </div>\n  )\n} \n\nexport default connect()(PlayerStats);","import React from 'react';\nimport PlayerStats from '../PlayerStats/PlayerStats';\nimport './PlayerStatsBlock.css';\n\nfunction PlayerStatsBlock({ players }) {\n  console.log(players);\n\n  const colors = ['#67DBF9', '#00E680', '#A722E5', '#FF4848', '#FF8413', '#FFEB38'];\n\n  return (\n    <div className=\"player-stats-block\">\n      {players ? players.map((player, i) => (\n        <PlayerStats key={player.player.id} player={player.player} color={colors[i%6]} />\n      )) : null}\n    </div>\n  );\n}\n\nexport default PlayerStatsBlock;\n","import { connect } from 'react-redux';\nimport PlayerStatsBlock from '../PlayerStatsBlock/PlayerStatsBlock';\n\nconst getAllPlayers = (players) => {\n  return players\n};\n\nconst mapStateToProps = state => ({\n  players: getAllPlayers(state.players)\n});\n\nexport default connect(mapStateToProps)(PlayerStatsBlock);","import React from 'react';\nimport './DropdownMenu.css';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { connect } from 'react-redux';\nimport { changeGraphDataType } from '../../actions/graphActions';\nimport { updatePlayersData } from '../../actions/graphActions';\n\nconst STATS_QUERY = gql`\n  query PlayerQuery($playerIds: [ID!]) {\n    stats (playerIds: $playerIds, seasons: [2019]) {\n      pts\n      reb\n      ast\n      stl\n      blk\n      fg_pct\n      fg3_pct\n      ft_pct\n      turnover\n      player {\n        first_name\n        last_name\n        id\n        team_id\n      }\n      game {\n        date\n        visitor_team_id\n        home_team_id\n      }\n    }\n  }\n`;\n\nfunction DropdownMenu(props) {\n  const { dispatch } = props;\n\n  const organizePlayerStats = (stats) => {\n    let playerStats = {};\n    stats.forEach((cur) => {\n      if (!playerStats[`${cur.player.first_name} ${cur.player.last_name}`]) {\n        playerStats[`${cur.player.first_name} ${cur.player.last_name}`] = [cur]\n      } else {\n        playerStats[`${cur.player.first_name} ${cur.player.last_name}`].push(cur)\n      }\n    });\n    console.log(playerStats)\n    return Object.entries(playerStats).map(cur => {\n      return {\n        id: cur[0],\n        stats: cur[1].sort(function(a, b) {\n          return (a.game.date < b.game.date) ? -1 : ((a.game.date > b.game.date) ? 1 : 0);\n        }).slice(Math.max(cur[1].length - 8, 1))\n      }\n    })\n  }\n\n  let playerRecentStats = []\n\n  return (\n    <div>\n      <span className=\"dropdown-text-before\">Last Eight</span>\n      <select \n        className=\"dropdown-menu-container\"\n        onChange={e => {\n          dispatch(changeGraphDataType(e.currentTarget.value));\n          dispatch(updatePlayersData(playerRecentStats))\n        }} \n      >\n        {props.players.map(player => (\n          <Query key={player.player.id} query={STATS_QUERY} variables = {{ playerIds: [player.player.id] }}>\n            {({ loading, error, data }) => {\n              if (loading) return null;\n              if (error) console.log(error);\n              if (data) {\n                const playerStats = organizePlayerStats(data.stats);\n                playerStats.forEach(cur => {\n                  let obj = { \n                    name: cur.id,\n                    type: 'spline'\n                  }\n                  obj.data = cur.stats;\n                  playerRecentStats.push(obj);\n                  console.log(playerRecentStats)\n                })\n              }\n              return null\n            }}\n          </Query>\n        ))}\n        {props.items.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}  \n\nexport default connect()(DropdownMenu);","import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu';\nimport './Graph.css';\n\nfunction Graph({ graphOptions, players }) {\n  const menuItems = [\n    { label: \"PTS\", value: \"pts\" },\n    { label: \"REB\", value: \"reb\" },\n    { label: \"AST\", value: \"ast\" },\n    { label: \"STL\", value: \"stl\" },\n    { label: \"BLK\", value: \"blk\" },\n    { label: \"FG%\", value: \"fg_pct\" },\n    { label: \"3FG%\", value: \"fg3_pct\" },\n    { label: \"FT%\", value: \"ft_pct\" },\n    { label: \"TO\", value: \"turnover\" },\n  ]\n\n  return Array.isArray(players) && players.length ?  (\n    <div className=\"graph-container\">\n      <DropdownMenu items={menuItems} options={graphOptions} players={players} />\n      <HighchartsReact highcharts={Highcharts} options={graphOptions} containerProps={{ style: { height: \"100%\" } }}/>\n    </div>\n  ) : (\n    <div className=\"page-empty-text\">Search a player's name to get started</div>\n  );\n}\n\nexport default Graph;\n","import { connect } from 'react-redux';\nimport Graph from '../Graph/Graph';\n\nconst getAllPlayers = (players) => {\n  return players\n};\n\nconst mapStateToProps = state => ({\n  graphOptions: state.graphs,\n  players: getAllPlayers(state.players)\n});\n\nexport default connect(mapStateToProps)(Graph);","import React from 'react';\nimport Header from '../Header/Header';\nimport PlayerStatsBlockContainer from '../PlayerStatsBlockContainer/PlayerStatsBlockContainer';\nimport GraphContainer from '../GraphContainer/GraphContainer';\nimport './Home.css';\n\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <Header />\n      <div className=\"blocks-container\">\n        <PlayerStatsBlockContainer />\n        <GraphContainer />\n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {\n  useHistory,\n  useParams,\n  useLocation,\n  Link\n} from 'react-router-dom';\nimport moment from 'moment';\nimport './PlayerProfile.css';\nimport teams from '../../teams.json';\n\nconst STATS_QUERY = gql`\n    query PlayerQuery($playerId: ID!) {\n      stats (playerIds: [$playerId], seasons: [2019]) {\n        min\n        pts\n        reb\n        ast\n        stl\n        blk\n        fg_pct\n        fg3_pct\n        ft_pct\n        turnover\n        game {\n          date\n          home_team_id\n          visitor_team_id\n        }\n        player {\n          team_id\n        }\n      }\n      season (season: 2019, playerIds: [$playerId]) {\n        games_played\n        min\n        pts\n        reb\n        ast\n        stl\n        blk\n        fg_pct\n        fg3_pct\n        ft_pct\n        turnover\n      }\n      player (id: $playerId) {\n        first_name\n        last_name\n        position\n        team {\n          full_name\n        }\n      }\n    }\n  `;\n\nfunction PlayerProfile() {\n\n  let location = useLocation();\n  let background = location.state && location.state.background;\n  let { id } = useParams();\n  let history = useHistory();\n\n  let back = e => {\n    e.stopPropagation();\n    history.goBack();\n  };\n\n  return (\n    <div className=\"profile-container\">\n      <Query query={STATS_QUERY} variables = {{ playerId: id }}>\n        {({ loading, error, data }) => {\n          if (loading) return null;\n          if (error) console.log(error);\n          console.log(data)\n          if (data) {\n            data.stats.sort(function(a, b) {\n              return (a.game.date > b.game.date) ? -1 : ((a.game.date < b.game.date) ? 1 : 0);\n            })\n          }\n          return (\n            <div style={{position: \"relative\"}}>\n              {background ? \n                <div className=\"close-button\" onClick={back}>\n                  <svg width=\"33\" height=\"33\" viewBox=\"0 0 33 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <line x1=\"0.707107\" y1=\"0.792893\" x2=\"29.799\" y2=\"29.8848\" stroke=\"white\" strokeWidth=\"2\"/>\n                    <line x1=\"29.8071\" y1=\"0.707107\" x2=\"0.71523\" y2=\"29.799\" stroke=\"white\" strokeWidth=\"2\"/>\n                  </svg> \n                </div> :\n                <Link to={{ pathname: `/` }} className=\"home-button\">\n                  <svg width=\"42\" height=\"33\" viewBox=\"0 0 42 33\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M42 16.5H3M3 16.5L19.4458 2M3 16.5L19.4458 31\" stroke=\"white\" strokeWidth=\"3\"/>\n                  </svg>\n                  <span style={{marginLeft: \"10px\"}}>Home</span>\n                </Link>\n              }\n              <div className=\"player-name\">{data.player.first_name} {data.player.last_name}</div>\n              <div className=\"table-title\">Season Averages</div>\n              <div className=\"season-average-table-container\">\n                <table>\n                  <thead>\n                    <tr>\n                      <th>GP</th>\n                      <th>Min</th>\n                      <th>Pts</th>\n                      <th>Reb</th>\n                      <th>Ast</th>\n                      <th>Stl</th>\n                      <th>Blk</th>\n                      <th>FG%</th>\n                      <th>3FG%</th>\n                      <th>FT%</th>\n                      <th>TO</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      {data.season.map(player =>(\n                        <Fragment key={player.games_played}>\n                          <td>{player.games_played}</td>\n                          <td>{player.min}</td>\n                          <td>{player.pts}</td>\n                          <td>{player.reb}</td>\n                          <td>{player.ast}</td>\n                          <td>{player.stl}</td>\n                          <td>{player.blk}</td>\n                          <td>{player.fg_pct}</td>\n                          <td>{player.fg3_pct}</td>\n                          <td>{player.ft_pct}</td>\n                          <td>{player.turnover}</td>\n                        </Fragment>\n                      ))}\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n              <div className=\"table-title\">Previous Games</div>\n              <div className=\"previous-game-table-container\">\n                <table>\n                  <thead>\n                    <tr className=\"previous-game-table-header\">\n                      <th>Date</th>\n                      <th>Opp</th>\n                      <th>Min</th>\n                      <th>Pts</th>\n                      <th>Reb</th>\n                      <th>Ast</th>\n                      <th>Stl</th>\n                      <th>Blk</th>\n                      <th>FG%</th>\n                      <th>3FG%</th>\n                      <th>FT%</th>\n                      <th>TO</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                  {data.stats.map(game => {\n                    const opponent = game.player.team_id === game.game.visitor_team_id ? game.game.home_team_id : game.game.visitor_team_id;\n                    return (<tr key={game.game.date}>\n                      <td>{moment(game.game.date).format(\"M/D/YY\")}</td>\n                      <td>{teams[opponent].abbreviation}</td>\n                      <td>{game.min}</td>\n                      <td>{game.pts}</td>\n                      <td>{game.reb}</td>\n                      <td>{game.ast}</td>\n                      <td>{game.stl}</td>\n                      <td>{game.blk}</td>\n                      <td>{game.fg_pct}</td>\n                      <td>{game.fg3_pct}</td>\n                      <td>{game.ft_pct}</td>\n                      <td>{game.turnover}</td>\n                    </tr>)\n                  })}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default PlayerProfile;","import React from \"react\";\nimport PlayerProfile from '../PlayerProfile/PlayerProfile';\nimport './Modal.css'\n\nfunction Modal() {\n\n  return (\n    <div className=\"modal-container\">\n      <div className=\"modal\">\n        <PlayerProfile />\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;","import React from 'react';\nimport {\n  Switch,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport Home from '../Home/Home';\nimport PlayerProfile from '../PlayerProfile/PlayerProfile';\nimport Modal from '../Modal/Modal';\n\nfunction ModalSwitch() {\n  let location = useLocation();\n  let background = location.state && location.state.background;\n\n  return (\n    <>\n      <Switch location={background || location}>\n        <Route exact path=\"/\" children={<Home />} />\n        <Route exact path=\"/player/:id\" children={<PlayerProfile />} />\n      </Switch>\n\n      {/* Show the modal when a background page is set */}\n      {background && <Route path=\"/player/:id\" children={<Modal />} />}\n    </>\n  );\n}\n\nexport default ModalSwitch;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport ModalSwitch from './components/ModalSwitch/ModalSwitch';\nimport './App.css';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Router>\n          <ModalSwitch />\n        </Router>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","export default {\n  players: [],\n  graphOptions: {\n    graphDataType: 'pts',\n    chart: {\n      backgroundColor: '#282C34',\n      type: 'line',\n    },\n\n    title: {\n      text: null,\n      style: {\n        color: '#ffffff'\n      }\n    },\n\n    xAxis: {\n      labels: {\n        enabled: false\n      }\n    },\n\n    yAxis: {\n      title: {\n        text: 'Points'\n      }\n    },\n\n    tooltip: {\n      backgroundColor: '#343A40',\n      borderWidth: 0,\n      style:{\n        color:'#ffffff',\n        fontSize:'15px',\n        whiteSpace:'nowrap',\n        fontFamily: 'Lato',\n      },\n      padding: 15,\n      headerFormat: null,\n      pointFormat: `\n        <b>{point.playerName}</b><br/>\n        <span style=\"color:{point.color}\">●</span> {point.gameData}: <b>{point.y}</b><br/>\n      `,\n      shared: true\n    },\n\n    legend: {\n      itemStyle: {\n        color: '#ffffff',\n      }\n    },\n\n    plotOptions: {\n      series: {\n        label: {\n          connectorAllowed: false\n        },\n        pointStart: 0\n      }\n    },\n\n    series: [],\n\n    responsive: {\n      rules: [{\n        condition: {\n          maxWidth: 500\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom'\n          }\n        }\n      }]\n    }\n  }\n}","import {combineReducers} from 'redux';\nimport players from './playerReducer';\nimport graphs from './graphReducer';\n\nconst rootReducer = combineReducers({\n  // short hand property names\n  graphs,\n  players,\n})\n\nexport default rootReducer;","import initialState from './initialState';\nimport teams from '../teams.json';\n\nexport default function graphReducer(state = initialState.graphOptions, action) {\n  const colors = ['#67DBF9', '#00E680', '#A722E5', '#FF4848', '#FF8413', '#FFEB38'];\n  const dataTypeToLabel = {\n    'pts': 'Points',\n    'reb': 'Rebounds',\n    'ast': 'Assists',\n    'stl': 'Steals',\n    'blk': 'Blocks',\n    'fg_pct': 'Field Goal Percentage',\n    'fg3_pct': 'Three Point Field Goal Percentage',\n    'ft_pct': 'Free Throw Percentage',\n    'turnover': 'Turnovers',\n  };\n\n  switch (action.type) {\n    case 'CHANGE_GRAPH_DATATYPE':\n      const newState = JSON.parse(JSON.stringify(state));\n      newState.graphDataType = action.graph;\n      console.log(action.graph)\n      newState.yAxis.title.text = dataTypeToLabel[action.graph];\n      return newState;\n\n    case 'UPDATE_PLAYERS_DATA':\n      const newUpdatedState = JSON.parse(JSON.stringify(state));\n      newUpdatedState.series = action.stats;\n      newUpdatedState.series.forEach((cur, i) => {\n        cur.color = colors[i%6];\n        cur.data = cur.data.map(d => {\n          let date = new Date(d.game.date);\n          let opponent = d.player.team_id !== d.game.visitor_team_id ? d.game.visitor_team_id : d.game.home_team_id;\n          return {\n            y: d[state.graphDataType],\n            gameData: `${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()} vs ${teams[opponent].name}`,\n            playerName: `${d.player.first_name} ${d.player.last_name}`,\n          }\n        });\n      })\n      return newUpdatedState;\n      \n    case \"ADD_PLAYER_TO_SERIES\":\n      const newAddedState = JSON.parse(JSON.stringify(state));\n      action.options.data = action.options.data.map(d => {\n        let date = new Date(d.game.date);\n        console.log(d)\n        let opponent = d.player.team_id === d.game.visitor_team_id ? d.game.home_team_id : d.game.visitor_team_id;\n        return {\n          y: d[state.graphDataType],\n          gameData: `${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()} vs ${teams[opponent].name}`,\n          playerName: `${d.player.first_name} ${d.player.last_name}`,\n        }\n      });\n      newAddedState.series = [\n        ...newAddedState.series,\n        action.options\n      ];\n      newAddedState.series.forEach((cur, i) => {\n        cur.color = colors[i%6];\n      });\n      return newAddedState;\n\n    case \"DELETE_PLAYER_FROM_SERIES\":\n      const newRemovedState = JSON.parse(JSON.stringify(state));\n      newRemovedState.series = state.series.filter((cur) => {\n        return (cur.name !== action.player)\n      });\n      newRemovedState.series.forEach((cur, i) => {\n        cur['color'] = colors[i%6];\n      });\n      return newRemovedState;\n\n     default:\n       return state;\n  }\n}","import initialState from './initialState';\n\nexport default function playerReducer(state = initialState.players, action) {\n  switch (action.type) {\n    case 'ADD_PLAYER':\n      // console.log([...state, action])\n      return [...state, action]\n\n    case 'DELETE_PLAYER':\n      let removeIndex = 0\n      state.forEach((cur,i) => {\n        if (cur.player.id === action.player) {\n          removeIndex = i;\n        }\n      })\n      return [\n        ...state.slice(0, removeIndex),\n        ...state.slice(removeIndex + 1)\n      ]\n\n     default:\n       return state;\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\nimport rootReducer from '../reducers/index';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer\n  );\n}"],"sourceRoot":""}